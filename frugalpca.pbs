#!/bin/bash

####  PBS preamble
#PBS -N fp.ukb.diffpopu
#PBS -l nodes=1:ppn=4,pmem=4gb,walltime=8:00:00
#### #PBS -t 0-99

#PBS -j oe
#PBS -o logs/
#PBS -e logs/
#PBS -m p
#PBS -V
#PBS -A leeshawn_fluxod
#PBS -q fluxod
#PBS -l qos=flux
####  End PBS preamble
set -e -o pipefail

# Print system info
#  Change to the directory you submitted from
if [ -n "$PBS_O_WORKDIR" ]; then cd $PBS_O_WORKDIR; fi
#  Show list of CPUs you ran on, if you're running under PBS
if [ -n "$PBS_NODEFILE" ]; then cat $PBS_NODEFILE; fi
# Print job and array ids
echo $PBS_JOBID
echo $PBS_ARRAYID
jobid="${PBS_JOBID:0:8}"
# module load R mkl/11.3.3 gcc/5.4.0 armadillo plink

#####debug#########
# PBS_ARRAYID=2
#####debug#########

# TRACE
trace=/home/daiweiz/laser/trace

date
geno_file=/scratch/leeshawn_fluxod/daiweiz/data/kgn/kgn_bial_orphans_snps_ukb_snpscap_ukb_EUR.geno
study_file=/scratch/leeshawn_fluxod/daiweiz/data/ukb/ukb_snpscap_kgn_bial_orphans_pred_EAS_oadp.geno
pref_out=/scratch/leeshawn_fluxod/daiweiz/data/ukb/ukb_EAS_sturef_kgn_EUR
${trace} \
        -g ${geno_file} \
        -s ${study_file} \
        -o ${pref_out} \
        -k 4 \
        -K 8
date

# date
# # i=$PBS_ARRAYID
# let 'n=1000+i*500'
# timestamp=`date +%s`
# geno_file=/scratch/leeshawn_fluxod/daiweiz/data/ggsim${n}/ggsim${n}_100000_${n}_2_1_100_0.geno
# study_file=/scratch/leeshawn_fluxod/daiweiz/data/ggsim${n}/ggsim${n}_100000_200_2_1_100_1.geno
# pref_out=/scratch/leeshawn_fluxod/daiweiz/data/ggsim${n}/ggsim${n}_100000_${n}_200_2_1_100_${timestamp}
# ${trace} \
#         -g ${geno_file} \
#         -s ${study_file} \
#         -o ${pref_out} \
#         -k 2 \
#         -K 8
# date

# geno_file=/scratch/leeshawn_fluxod/daiweiz/data/kgn/kgn_bial_orphans_snps_ukb_snpscap_ukb.geno
# study_file=/scratch/leeshawn_fluxod/daiweiz/data/ukb/ukb_snpscap_kgn_bial_orphans_5c.geno
# pref_out=/scratch/leeshawn_fluxod/daiweiz/data/ukb/ukb_snpscap_kgn_bial_orphans_5c_sturef_kgn_bial_orphans_snpscap_ukb
# trace \
#         -g ${geno_file} \
#         -s ${study_file} \
#         -o ${pref_out} \
#         -k 4 \
#         -K 8
# date
# geno_file=/scratch/leeshawn_fluxod/daiweiz/data/kgn/kgn_bial_orphans_snps_ukb_snpscap_ukb_EUR.geno
# study_file=/scratch/leeshawn_fluxod/daiweiz/data/ukb/ukb_snpscap_kgn_bial_orphans_nchunks100/ukb_snpscap_kgn_bial_orphans_pred_EUR_oadp_5c.geno
# pref_out=/scratch/leeshawn_fluxod/daiweiz/data/ukb/ukb_snpscap_kgn_bial_orphans_nchunks100/ukb_snpscap_kgn_bial_orphans_pred_EUR_oadp_5c_sturef_kgn_bial_orphans_snps_ukb_snpscap_ukb_EUR
# trace \
#         -g ${geno_file} \
#         -s ${study_file} \
#         -o ${pref_out} \
#         -k 4 \
#         -K 8
# date

# Put your job commands here:
# python -c "import frugalpca_tests as fpt; fpt.test_pca_ggsim('${i}')"
# python -c "import frugalpca_tests as fpt; fpt.test_pca_ukb_5c()"
# python -c "import frugalpca_tests as fpt; fpt.test_pca_ukb_EUR_5c()"
# python -c "import frugalpca_tests as fpt; fpt.test_pca_onepopu('AFR')"
# python -c "import frugalpca_tests as fpt; fpt.test_pca_onepopu('AMR')"
# python -c "import frugalpca_tests as fpt; fpt.test_pca_onepopu('EAS')"
# python -c "import frugalpca_tests as fpt; fpt.test_pca_onepopu('SAS', deol=True)"
# python frugalpca_runner.py

# i=$PBS_ARRAYID
# pref_ref=../data/kgn/kgn_bial_orphans_snps_ukb_snpscap_ukb_EUR
# pref_stu=../data/ukb/ukb_snpscap_kgn_bial_orphans_nchunks100/EUR_nchunks100/ukb_snpscap_kgn_bial_orphans_nchunks100_`printf "%04d" ${i}`_pred_EUR_oadp
# method=sp
# python -c "import frugalpca as fp; fp.run_pca('${pref_ref}', '${pref_stu}', '${method}', hdpca_n_spikes=4)"
# method=ap
# python -c "import frugalpca as fp; fp.run_pca('${pref_ref}', '${pref_stu}', '${method}', hdpca_n_spikes=4)"
# method=oadp
# python -c "import frugalpca as fp; fp.run_pca('${pref_ref}', '${pref_stu}', '${method}', hdpca_n_spikes=4)"
# 
# i=$PBS_ARRAYID
# pref_ref=../data/kgn/kgn_bial_orphans_snps_ukb_snpscap_ukb
# pref_stu=../data/ukb/ukb_snpscap_kgn_bial_orphans_nchunks100/ukb_snpscap_kgn_bial_orphans_nchunks100_`printf "%04d" ${i}`
# method=sp
# python -c "import frugalpca as fp; fp.run_pca('${pref_ref}', '${pref_stu}', '${method}', hdpca_n_spikes=4)"
# method=ap
# python -c "import frugalpca as fp; fp.run_pca('${pref_ref}', '${pref_stu}', '${method}', hdpca_n_spikes=4)"
# method=oadp
# python -c "import frugalpca as fp; fp.run_pca('${pref_ref}', '${pref_stu}', '${method}', hdpca_n_spikes=4)"

